struct Node{
    Node *links[26];
    bool flag=false;
    bool containsKey(char ch){
        return links[ch-'a']!=NULL;
    }
    void put(char ch,Node *node){
        links[ch-'a']=node;
    }
    Node * next(char ch){
        return links[ch-'a'];
    }
    void setNode(){
        flag=true;
    }
};
class Trie{
    private: Node *root;
    public:
    
    Trie(){
        root=new Node();
    }
    void insert(string word) {
           Node *node=root;
           for(int i=0;i<word.size();i++){
            if(!node->containsKey(word[i])){
                 node->put(word[i],new Node());
            }
            node=node->next(word[i]);

           }
           node->setNode();
    }

    bool search(string word) {
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(!node->containsKey(word[i])) return false;
            node=node->next(word[i]);
        }
        return node->flag;
        
    }

    bool startsWith(string word) {
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(!node->containsKey(word[i])) return false;
            node=node->next(word[i]);
        }
        return true;
        
    }
};
