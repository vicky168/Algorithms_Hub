#include <bits/stdc++.h> 
struct Node{
    Node *links[26];
    int cw = 0;
    int cp = 0;
    Node() {
        for (int i = 0; i < 26; i++) links[i] = NULL;
    }
    bool isContainKey(char ch){
        return links[ch-'a']!=NULL;
    }
    Node* next(char ch){
        return links[ch-'a'];
    }
    void put(char ch,Node* node){
        links[ch-'a']=node;
    }
    void incPref(){
        cp+=1;
    }
    void incWord(){
        cw+=1;
    }
    void decword(){
        cw--;
    }
    void decPref(){
        cp--;
    }
};
class Trie{
    private: Node* root;
    public:

    Trie(){
        // Write your code here.
        root=new Node();
    }

    void insert(string &word){
        // Write your code here.
        Node *node=root;
        for(auto &i:word){
            if(!node->isContainKey(i)){
                node->put(i,new Node());
            }
            node=node->next(i);
            node->incPref();

        }
        node->incWord();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        Node *node=root;
        for(auto &i:word){
            if(!node->isContainKey(i)){
                return 0;
            }
            node=node->next(i);

        }
        return node->cw;

    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        Node *node=root;
        for(auto &i:word){
            if(!node->isContainKey(i)){
                return 0;
            }
            node=node->next(i);

        }
        return node->cp;
    }

    void erase(string &word){
        // Write your code here.
        Node *node=root;
        for(auto &i:word){
            if(!node->isContainKey(i)){
                return;
            }
            node=node->next(i);
            node->decPref();

        }
        node->decword();
    }
};
